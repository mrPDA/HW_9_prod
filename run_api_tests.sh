#!/bin/bash
# üß™ –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ML API
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
API_URL="${API_URL:-http://localhost:8000}"
OUTPUT_DIR="${OUTPUT_DIR:-test_results}"
PERFORMANCE_USERS="${PERFORMANCE_USERS:-10}"
PERFORMANCE_DURATION="${PERFORMANCE_DURATION:-30}"
QUICK_MODE="${QUICK_MODE:-false}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è $1${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python
    if ! command -v python3 &> /dev/null; then
        error "Python3 –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python 3.11+"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º pip
    if ! command -v pip &> /dev/null; then
        error "pip –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ pip"
        exit 1
    fi
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if [ ! -d "tests/__pycache__" ] || [ ! -f "tests/requirements.txt" ]; then
        log "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..."
        pip install -r tests/requirements.txt
    fi
    
    success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ API –≤ —Ñ–æ–Ω–µ
start_api() {
    log "–ó–∞–ø—É—Å–∫ ML API –Ω–∞ $API_URL..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞
    if curl -f "$API_URL/health" &> /dev/null; then
        warning "API —É–∂–µ –∑–∞–ø—É—â–µ–Ω –Ω–∞ $API_URL"
        return 0
    fi
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º API –≤ —Ñ–æ–Ω–µ
    cd app
    python -m uvicorn main:app --host 0.0.0.0 --port 8000 &
    API_PID=$!
    cd ..
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ API
    log "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ API..."
    for i in {1..30}; do
        if curl -f "$API_URL/health" &> /dev/null; then
            success "API —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω (PID: $API_PID)"
            echo $API_PID > api.pid
            return 0
        fi
        sleep 2
    done
    
    error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å API –∑–∞ 60 —Å–µ–∫—É–Ω–¥"
    exit 1
}

# –§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ API
stop_api() {
    if [ -f "api.pid" ]; then
        API_PID=$(cat api.pid)
        log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ API (PID: $API_PID)..."
        kill $API_PID 2>/dev/null || true
        rm -f api.pid
        success "API –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
run_functional_tests() {
    log "–ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤..."
    
    cd tests
    if $QUICK_MODE; then
        python run_api_tests.py \
            --url "$API_URL" \
            --output-dir "$OUTPUT_DIR" \
            --quick
    else
        python run_api_tests.py \
            --url "$API_URL" \
            --output-dir "$OUTPUT_DIR" \
            --no-performance
    fi
    cd ..
    
    success "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
run_performance_tests() {
    if $QUICK_MODE; then
        warning "–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã (–±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º)"
        return 0
    fi
    
    log "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ($PERFORMANCE_USERS –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, ${PERFORMANCE_DURATION}—Å)..."
    
    cd tests
    python load_test.py \
        --url "$API_URL" \
        --users "$PERFORMANCE_USERS" \
        --duration "$PERFORMANCE_DURATION" \
        --output "${OUTPUT_DIR}/performance_report.html"
    cd ..
    
    success "–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
generate_comprehensive_report() {
    log "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞..."
    
    cd tests
    python run_api_tests.py \
        --url "$API_URL" \
        --output-dir "$OUTPUT_DIR" \
        --performance-users $(( PERFORMANCE_USERS / 2 )) \
        --performance-duration 15
    cd ..
    
    success "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω"
}

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
show_results() {
    log "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
    echo ""
    
    if [ -d "$OUTPUT_DIR" ]; then
        echo "üìÅ –§–∞–π–ª—ã –æ—Ç—á–µ—Ç–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: $OUTPUT_DIR"
        find "$OUTPUT_DIR" -name "*.html" -o -name "*.json" | while read file; do
            echo "  üìÑ $(basename "$file")"
        done
        echo ""
        
        # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π HTML –æ—Ç—á–µ—Ç
        MAIN_REPORT=$(find "$OUTPUT_DIR" -name "*comprehensive_report*.html" | head -1)
        if [ -n "$MAIN_REPORT" ]; then
            success "–û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç—á–µ—Ç: $MAIN_REPORT"
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ (macOS/Linux)
            if command -v open &> /dev/null; then
                log "–û—Ç–∫—Ä—ã—Ç–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ..."
                open "$MAIN_REPORT"
            elif command -v xdg-open &> /dev/null; then
                log "–û—Ç–∫—Ä—ã—Ç–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ..."
                xdg-open "$MAIN_REPORT"
            else
                log "–û—Ç–∫—Ä–æ–π—Ç–µ –æ—Ç—á–µ—Ç –≤—Ä—É—á–Ω—É—é: file://$(pwd)/$MAIN_REPORT"
            fi
        fi
    else
        warning "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏
cleanup() {
    log "–û—á–∏—Å—Ç–∫–∞..."
    stop_api
    success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
trap cleanup EXIT INT TERM

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –ø–æ–º–æ—â–∏
show_help() {
    cat << EOF
üß™ ML API Testing Script

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [OPTIONS]

–û–ø—Ü–∏–∏:
  -u, --url URL              API URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: http://localhost:8000)
  -o, --output DIR           –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: test_results)
  -q, --quick               –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º (—Ç–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã)
  -p, --performance-users N  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10)
  -d, --duration N          –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 30)
  --no-start-api            –ù–µ –∑–∞–ø—É—Å–∫–∞—Ç—å API –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
  --only-functional         –¢–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
  --only-performance        –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  --only-report             –¢–æ–ª—å–∫–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
  -h, --help               –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
  API_URL                   URL API
  OUTPUT_DIR               –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  PERFORMANCE_USERS        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  PERFORMANCE_DURATION     –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  QUICK_MODE               –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º (true/false)

–ü—Ä–∏–º–µ—Ä—ã:
  $0                       # –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ API
  $0 --quick              # –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  $0 -u http://prod-api:8000  # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ production API
  $0 --only-performance   # –¢–æ–ª—å–∫–æ –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã–µ —Ç–µ—Å—Ç—ã
EOF
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
ONLY_FUNCTIONAL=false
ONLY_PERFORMANCE=false
ONLY_REPORT=false
START_API=true

while [[ $# -gt 0 ]]; do
    case $1 in
        -u|--url)
            API_URL="$2"
            shift 2
            ;;
        -o|--output)
            OUTPUT_DIR="$2"
            shift 2
            ;;
        -q|--quick)
            QUICK_MODE=true
            shift
            ;;
        -p|--performance-users)
            PERFORMANCE_USERS="$2"
            shift 2
            ;;
        -d|--duration)
            PERFORMANCE_DURATION="$2"
            shift 2
            ;;
        --no-start-api)
            START_API=false
            shift
            ;;
        --only-functional)
            ONLY_FUNCTIONAL=true
            shift
            ;;
        --only-performance)
            ONLY_PERFORMANCE=true
            shift
            ;;
        --only-report)
            ONLY_REPORT=true
            shift
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        *)
            error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
            show_help
            exit 1
            ;;
    esac
done

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
main() {
    echo ""
    echo "üß™ ML Fraud Detection API Testing"
    echo "=================================="
    echo "üéØ API URL: $API_URL"
    echo "üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: $OUTPUT_DIR"
    echo "‚ö° –†–µ–∂–∏–º: $([ "$QUICK_MODE" = true ] && echo "–ë—ã—Å—Ç—Ä—ã–π" || echo "–ü–æ–ª–Ω—ã–π")"
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    check_dependencies
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    mkdir -p "$OUTPUT_DIR"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º API –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if $START_API; then
        start_api
    fi
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if $ONLY_PERFORMANCE; then
        run_performance_tests
    elif $ONLY_REPORT; then
        generate_comprehensive_report
    elif $ONLY_FUNCTIONAL; then
        run_functional_tests
    else
        # –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        run_functional_tests
        run_performance_tests
        generate_comprehensive_report
    fi
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    show_results
    
    success "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ! üéâ"
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main
