"""
‚öôÔ∏è Configuration Management
===========================

–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
–ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ Pydantic.
"""

import os
from functools import lru_cache
from typing import Optional
from pydantic import Field
from pydantic_settings import BaseSettings


class Settings(BaseSettings):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π –∏–∑ environment"""
    
    # üöÄ –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–∏—Å–∞
    service_name: str = Field(default="fraud-detection-api", env="SERVICE_NAME")
    service_version: str = Field(default="1.0.0", env="SERVICE_VERSION")
    environment: str = Field(default="development", env="ENVIRONMENT")
    debug: bool = Field(default=False, env="DEBUG")
    
    # üåê –°–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    host: str = Field(default="0.0.0.0", env="HOST")
    port: int = Field(default=8000, env="PORT")
    workers: int = Field(default=1, env="WORKERS")
    
    # ü§ñ MLflow –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    mlflow_tracking_uri: str = Field(
        default="http://localhost:5000",
        env="MLFLOW_TRACKING_URI",
        description="MLflow Tracking Server URI"
    )
    mlflow_username: Optional[str] = Field(default=None, env="MLFLOW_TRACKING_USERNAME")
    mlflow_password: Optional[str] = Field(default=None, env="MLFLOW_TRACKING_PASSWORD")
    
    # üéØ –ú–æ–¥–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    model_name: str = Field(
        default="fraud_detection_yandex_model",
        env="MODEL_NAME",
        description="–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤ MLflow Registry"
    )
    model_alias: str = Field(
        default="champion",
        env="MODEL_ALIAS", 
        description="–ê–ª–∏–∞—Å –º–æ–¥–µ–ª–∏ (champion, challenger, staging)"
    )
    model_stage: str = Field(
        default="Production",
        env="MODEL_STAGE",
        description="–°—Ç–∞–¥–∏—è –º–æ–¥–µ–ª–∏ (Production, Staging, Archived)"
    )
    
    # üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –º–µ—Ç—Ä–∏–∫–∏
    enable_metrics: bool = Field(default=True, env="ENABLE_METRICS")
    metrics_port: int = Field(default=9090, env="METRICS_PORT")
    
    # üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    log_level: str = Field(default="INFO", env="LOG_LEVEL")
    log_format: str = Field(default="json", env="LOG_FORMAT")  # json, text
    
    # üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    api_key: Optional[str] = Field(default=None, env="API_KEY")
    cors_origins: str = Field(default="*", env="CORS_ORIGINS")
    
    # üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π)
    database_url: Optional[str] = Field(default=None, env="DATABASE_URL")
    
    # ‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    max_batch_size: int = Field(default=100, env="MAX_BATCH_SIZE")
    prediction_timeout: int = Field(default=30, env="PREDICTION_TIMEOUT")  # —Å–µ–∫—É–Ω–¥—ã
    model_cache_ttl: int = Field(default=3600, env="MODEL_CACHE_TTL")  # —Å–µ–∫—É–Ω–¥—ã
    
    # üåê Kubernetes –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    k8s_namespace: str = Field(default="default", env="K8S_NAMESPACE")
    k8s_service_name: str = Field(default="fraud-detection", env="K8S_SERVICE_NAME")
    k8s_pod_name: Optional[str] = Field(default=None, env="HOSTNAME")
    
    class Config:
        env_file = ".env"
        env_file_encoding = "utf-8"
        case_sensitive = False
        
        # –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        schema_extra = {
            "example": {
                "mlflow_tracking_uri": "http://mlflow.example.com:5000",
                "model_name": "fraud_detection_model",
                "model_alias": "champion",
                "log_level": "INFO",
                "enable_metrics": True,
                "environment": "production"
            }
        }
    
    def is_production(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ production –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        return self.environment.lower() in ("production", "prod")
    
    def is_development(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ development –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        return self.environment.lower() in ("development", "dev", "local")
    
    def get_cors_origins(self) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ CORS origins"""
        if self.cors_origins == "*":
            return ["*"]
        return [origin.strip() for origin in self.cors_origins.split(",")]


@lru_cache()
def get_settings() -> Settings:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è lru_cache –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
    —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –∏ –∫–µ—à–∏—Ä—É—é—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏.
    """
    return Settings()


# –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏–º–ø–æ—Ä—Ç–∞
settings = get_settings()
