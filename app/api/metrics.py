"""
üìä Metrics Endpoints
===================

–≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–µ—Ç—Ä–∏–∫ –≤ Prometheus —Ñ–æ—Ä–º–∞—Ç–µ
–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ —Ä–∞–±–æ—Ç–µ —Å–µ—Ä–≤–∏—Å–∞.
"""

from datetime import datetime, timedelta
from typing import Dict, Any, List
import psutil

from fastapi import APIRouter, Response
from pydantic import BaseModel
from prometheus_client import generate_latest, CONTENT_TYPE_LATEST
import structlog

from app.core.config import get_settings

logger = structlog.get_logger(__name__)
router = APIRouter()
settings = get_settings()


class ServiceMetrics(BaseModel):
    """–°—Ö–µ–º–∞ –º–µ—Ç—Ä–∏–∫ —Å–µ—Ä–≤–∏—Å–∞"""
    service_name: str
    version: str
    environment: str
    uptime_seconds: float
    memory_usage_mb: float
    memory_usage_percent: float
    cpu_usage_percent: float
    timestamp: datetime


class ModelMetrics(BaseModel):
    """–°—Ö–µ–º–∞ –º–µ—Ç—Ä–∏–∫ –º–æ–¥–µ–ª–∏"""
    model_name: str
    model_version: str
    model_alias: str
    is_loaded: bool
    load_time_ms: float
    predictions_total: int
    avg_prediction_time_ms: float
    timestamp: datetime


# –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ uptime
from app.api.health import SERVICE_START_TIME


@router.get("/prometheus")
async def prometheus_metrics():
    """
    üìà –≠–∫—Å–ø–æ—Ä—Ç –º–µ—Ç—Ä–∏–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Prometheus
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ,
    —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º —Å Prometheus scraping.
    """
    metrics_data = generate_latest()
    return Response(
        content=metrics_data,
        media_type=CONTENT_TYPE_LATEST,
        headers={"Cache-Control": "no-cache"}
    )


@router.get("/service", response_model=ServiceMetrics)
async def service_metrics():
    """
    üîß –ú–µ—Ç—Ä–∏–∫–∏ —Å–µ—Ä–≤–∏—Å–∞
    
    –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤.
    """
    uptime = (datetime.utcnow() - SERVICE_START_TIME).total_seconds()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Å—É—Ä—Å–∞—Ö
    memory_info = psutil.virtual_memory()
    process = psutil.Process()
    process_memory = process.memory_info()
    
    return ServiceMetrics(
        service_name=settings.service_name,
        version=settings.service_version,
        environment=settings.environment,
        uptime_seconds=round(uptime, 2),
        memory_usage_mb=round(process_memory.rss / (1024 * 1024), 2),
        memory_usage_percent=round(memory_info.percent, 2),
        cpu_usage_percent=round(psutil.cpu_percent(interval=0.1), 2),
        timestamp=datetime.utcnow()
    )


@router.get("/model", response_model=ModelMetrics)
async def model_metrics():
    """
    ü§ñ –ú–µ—Ç—Ä–∏–∫–∏ ML –º–æ–¥–µ–ª–∏
    
    –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –∏ –µ–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
    """
    try:
        from app.main import ml_model
        
        if not ml_model or not ml_model.is_loaded:
            return ModelMetrics(
                model_name="unknown",
                model_version="unknown", 
                model_alias="unknown",
                is_loaded=False,
                load_time_ms=0.0,
                predictions_total=0,
                avg_prediction_time_ms=0.0,
                timestamp=datetime.utcnow()
            )
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ Prometheus counters
        from app.main import PREDICTION_COUNTER, PREDICTION_LATENCY
        
        predictions_total = int(PREDICTION_COUNTER._value._value)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        if PREDICTION_LATENCY._sum._value > 0 and PREDICTION_LATENCY._count._value > 0:
            avg_prediction_time = (PREDICTION_LATENCY._sum._value / PREDICTION_LATENCY._count._value) * 1000
        else:
            avg_prediction_time = 0.0
        
        return ModelMetrics(
            model_name=ml_model.model_name,
            model_version=ml_model.model_version or "unknown",
            model_alias=ml_model.model_alias,
            is_loaded=ml_model.is_loaded,
            load_time_ms=ml_model.load_time or 0.0,
            predictions_total=predictions_total,
            avg_prediction_time_ms=round(avg_prediction_time, 2),
            timestamp=datetime.utcnow()
        )
        
    except Exception as e:
        logger.error(f"Error getting model metrics: {e}")
        return ModelMetrics(
            model_name="error",
            model_version="error",
            model_alias="error", 
            is_loaded=False,
            load_time_ms=0.0,
            predictions_total=0,
            avg_prediction_time_ms=0.0,
            timestamp=datetime.utcnow()
        )


@router.get("/")
async def metrics_overview():
    """
    üìä –û–±–∑–æ—Ä –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫
    
    –°–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ –∏ –º–æ–¥–µ–ª–∏.
    """
    service_metrics_data = await service_metrics()
    model_metrics_data = await model_metrics()
    
    return {
        "service": service_metrics_data.dict(),
        "model": model_metrics_data.dict(),
        "endpoints": {
            "prometheus": "/metrics/prometheus",
            "service": "/metrics/service", 
            "model": "/metrics/model"
        },
        "timestamp": datetime.utcnow()
    }


@router.get("/debug")
async def debug_info():
    """
    üêõ –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    
    –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º.
    –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ development —Ä–µ–∂–∏–º–µ.
    """
    if settings.is_production():
        return {"message": "Debug info not available in production"}
    
    import os
    import sys
    
    debug_data = {
        "environment": dict(os.environ),
        "python": {
            "version": sys.version,
            "path": sys.path[:5],  # –ü–µ—Ä–≤—ã–µ 5 –ø—É—Ç–µ–π
            "modules": list(sys.modules.keys())[:20]  # –ü–µ—Ä–≤—ã–µ 20 –º–æ–¥—É–ª–µ–π
        },
        "process": {
            "pid": os.getpid(),
            "cwd": os.getcwd(),
            "user": os.getenv("USER", "unknown")
        },
        "settings": settings.dict(),
        "timestamp": datetime.utcnow()
    }
    
    return debug_data
