"""
üè• Health Check Endpoints
========================

–≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∏ –µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è Kubernetes liveness –∏ readiness –ø—Ä–æ–±.
"""

import time
import psutil
from datetime import datetime, timedelta
from typing import Dict, Any

from fastapi import APIRouter, HTTPException, status
from pydantic import BaseModel
import structlog

from app.core.config import get_settings

logger = structlog.get_logger(__name__)
router = APIRouter()

# –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
SERVICE_START_TIME = datetime.utcnow()
settings = get_settings()


class HealthResponse(BaseModel):
    """–°—Ö–µ–º–∞ –æ—Ç–≤–µ—Ç–∞ health check"""
    status: str
    timestamp: datetime
    uptime_seconds: float
    version: str
    environment: str


class ReadinessResponse(BaseModel):
    """–°—Ö–µ–º–∞ –æ—Ç–≤–µ—Ç–∞ readiness check"""
    status: str
    checks: Dict[str, Any]
    timestamp: datetime


class LivenessResponse(BaseModel):
    """–°—Ö–µ–º–∞ –æ—Ç–≤–µ—Ç–∞ liveness check"""
    status: str
    timestamp: datetime
    memory_usage_percent: float
    cpu_usage_percent: float


@router.get("/", response_model=HealthResponse)
async def health_check():
    """
    ü©∫ –û—Å–Ω–æ–≤–Ω–æ–π health check
    
    –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –±–∞–∑–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏.
    """
    uptime = (datetime.utcnow() - SERVICE_START_TIME).total_seconds()
    
    return HealthResponse(
        status="healthy",
        timestamp=datetime.utcnow(),
        uptime_seconds=round(uptime, 2),
        version=settings.service_version,
        environment=settings.environment
    )


@router.get("/ready", response_model=ReadinessResponse)
async def readiness_check():
    """
    ‚úÖ Readiness probe –¥–ª—è Kubernetes
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ç—Ä–∞—Ñ–∏–∫:
    - ML –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞
    - MLflow –¥–æ—Å—Ç—É–ø–µ–Ω
    - –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞—é—Ç
    """
    checks = {}
    overall_status = "ready"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ML –º–æ–¥–µ–ª–∏
    try:
        from app.main import ml_model
        if ml_model and ml_model.is_loaded:
            checks["ml_model"] = {
                "status": "ready",
                "model_name": ml_model.model_name,
                "model_version": ml_model.model_version,
                "load_time_ms": ml_model.load_time
            }
        else:
            checks["ml_model"] = {"status": "not_ready", "reason": "Model not loaded"}
            overall_status = "not_ready"
    except Exception as e:
        checks["ml_model"] = {"status": "error", "error": str(e)}
        overall_status = "not_ready"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ MLflow –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    try:
        import mlflow
        from mlflow.tracking import MlflowClient
        
        start_time = time.time()
        client = MlflowClient(settings.mlflow_tracking_uri)
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        experiments = client.search_experiments(max_results=1)
        response_time = (time.time() - start_time) * 1000
        
        checks["mlflow"] = {
            "status": "ready",
            "uri": settings.mlflow_tracking_uri,
            "response_time_ms": round(response_time, 2)
        }
    except Exception as e:
        checks["mlflow"] = {
            "status": "error", 
            "uri": settings.mlflow_tracking_uri,
            "error": str(e)
        }
        overall_status = "not_ready"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–∏—Å—Ç–µ–º—ã
    try:
        memory_percent = psutil.virtual_memory().percent
        cpu_percent = psutil.cpu_percent(interval=0.1)
        
        if memory_percent > 90 or cpu_percent > 95:
            checks["system_resources"] = {
                "status": "warning",
                "memory_percent": memory_percent,
                "cpu_percent": cpu_percent,
                "reason": "High resource usage"
            }
        else:
            checks["system_resources"] = {
                "status": "ready",
                "memory_percent": memory_percent,
                "cpu_percent": cpu_percent
            }
    except Exception as e:
        checks["system_resources"] = {"status": "error", "error": str(e)}
    
    if overall_status != "ready":
        raise HTTPException(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            detail={"status": overall_status, "checks": checks}
        )
    
    return ReadinessResponse(
        status=overall_status,
        checks=checks,
        timestamp=datetime.utcnow()
    )


@router.get("/live", response_model=LivenessResponse)
async def liveness_check():
    """
    üíì Liveness probe –¥–ª—è Kubernetes
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å —Å–µ—Ä–≤–∏—Å–∞ –∂–∏–≤ –∏ –æ—Ç–≤–µ—á–∞–µ—Ç.
    –ü—Ä–∏ –Ω–µ—É–¥–∞—á–µ Kubernetes –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç pod.
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
        memory_percent = psutil.virtual_memory().percent
        cpu_percent = psutil.cpu_percent(interval=0.1)
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ—Ä–æ–≥–∏ –¥–ª—è liveness
        if memory_percent > 95:
            logger.error(f"Critical memory usage: {memory_percent}%")
            raise HTTPException(
                status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
                detail=f"Critical memory usage: {memory_percent}%"
            )
        
        return LivenessResponse(
            status="alive",
            timestamp=datetime.utcnow(),
            memory_usage_percent=round(memory_percent, 2),
            cpu_usage_percent=round(cpu_percent, 2)
        )
        
    except Exception as e:
        logger.error(f"Liveness check failed: {e}")
        raise HTTPException(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            detail="Liveness check failed"
        )


@router.get("/startup")
async def startup_check():
    """
    üöÄ Startup probe –¥–ª—è Kubernetes
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Å–µ—Ä–≤–∏—Å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.
    –ë–æ–ª–µ–µ –º–µ–¥–ª–µ–Ω–Ω–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ readiness –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞.
    """
    uptime = (datetime.utcnow() - SERVICE_START_TIME).total_seconds()
    
    # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –º–æ–¥–µ–ª–∏
    if uptime < 30:  # 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ startup
        raise HTTPException(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            detail=f"Service still starting up. Uptime: {uptime:.1f}s"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –≥–æ—Ç–æ–≤–æ
    try:
        await readiness_check()
        return {
            "status": "started",
            "timestamp": datetime.utcnow(),
            "uptime_seconds": round(uptime, 2)
        }
    except HTTPException:
        raise HTTPException(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            detail="Service dependencies not ready"
        )
