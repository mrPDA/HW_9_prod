#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–æ–π S3 to Kafka Producer –¥–ª—è DataProc
========================================

–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
"""

import json
import time
import logging
import argparse
import sys
import random
from datetime import datetime

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def simulate_kafka_producer(args):
    """
    –°–∏–º—É–ª–∏—Ä—É–µ–º Kafka producer - –ø–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Kafka
    """
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ S3 to Kafka Producer (–ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è)")
    logger.info(f"üì¶ S3 Bucket: {args.s3_bucket}")
    logger.info(f"üìÅ –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤: {args.file_list}")
    logger.info(f"üîó Kafka Brokers: {args.kafka_brokers}")
    logger.info(f"üì® Topic: {args.topic}")
    logger.info(f"‚ö° TPS: {args.tps}")
    logger.info(f"‚è±Ô∏è Duration: {args.duration} —Å–µ–∫—É–Ω–¥")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö
    total_messages = int(args.tps) * int(args.duration)
    logger.info(f"üìä –ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {total_messages} —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    start_time = datetime.now()
    messages_sent = 0
    
    try:
        for i in range(total_messages):
            # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            message = {
                "transaction_id": f"tx_{i:06d}",
                "amount": round(random.uniform(10.0, 1000.0), 2),
                "merchant_id": f"m_{random.randint(100, 999)}",
                "user_id": f"u_{random.randint(1000, 9999)}",
                "timestamp": datetime.now().isoformat(),
                "is_fraud": random.choice([0, 1]) if random.random() < 0.1 else 0
            }
            
            # –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç: producer.send(topic, message)
            if i % 100 == 0:  # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π
                logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {i+1}/{total_messages}")
            
            messages_sent += 1
            
            # –ö–æ–Ω—Ç—Ä–æ–ª—å —Å–∫–æ—Ä–æ—Å—Ç–∏ (TPS)
            if messages_sent % int(args.tps) == 0:
                time.sleep(1.0)  # –ü–∞—É–∑–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –∫–∞–∂–¥—ã–µ TPS —Å–æ–æ–±—â–µ–Ω–∏–π
                
        end_time = datetime.now()
        duration = (end_time - start_time).total_seconds()
        
        logger.info(f"‚úÖ –ó–ê–í–ï–†–®–ï–ù–û: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {messages_sent} —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥")
        logger.info(f"üìä –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {messages_sent/duration:.2f} TPS")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def main():
    parser = argparse.ArgumentParser(description='Simple S3 to Kafka Producer')
    
    # S3 –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    parser.add_argument('--s3-bucket', required=True, help='S3 bucket name')
    parser.add_argument('--file-list', required=True, help='Comma-separated list of files')
    parser.add_argument('--s3-endpoint-url', help='S3 endpoint URL')
    parser.add_argument('--s3-access-key', help='S3 access key')
    parser.add_argument('--s3-secret-key', help='S3 secret key')
    
    # Kafka –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    parser.add_argument('--kafka-brokers', required=True, help='Kafka brokers')
    parser.add_argument('--kafka-user', help='Kafka username')
    parser.add_argument('--kafka-password', help='Kafka password')
    parser.add_argument('--topic', required=True, help='Kafka topic')
    
    # Streaming –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    parser.add_argument('--tps', type=int, default=10, help='Transactions per second')
    parser.add_argument('--duration', type=int, default=60, help='Duration in seconds')
    parser.add_argument('--shuffle-files', action='store_true', help='Shuffle files')
    
    args = parser.parse_args()
    
    logger.info("üéØ –ü—Ä–æ—Å—Ç–æ–π S3 to Kafka Producer - —Ç–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è")
    logger.info("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —Å–∏–º—É–ª—è—Ü–∏—è! –†–µ–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Kafka –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ.")
    
    try:
        success = simulate_kafka_producer(args)
        if success:
            logger.info("üéâ Producer –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ!")
            sys.exit(0)
        else:
            logger.error("‚ùå Producer –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π!")
            sys.exit(1)
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        sys.exit(1)

if __name__ == "__main__":
    main()
