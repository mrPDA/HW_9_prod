"""
ü§ñ Model Tests
==============

–¢–µ—Å—Ç—ã –¥–ª—è ML –º–æ–¥–µ–ª–∏ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π.
"""

import pytest
import pandas as pd
import numpy as np
from unittest.mock import Mock, patch, AsyncMock

from app.models.fraud_detector import FraudDetectionModel


@pytest.fixture
def sample_transaction_data():
    """–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    return pd.DataFrame({
        "transaction_id": ["txn_001"],
        "amount": [150.75],
        "merchant_category": ["restaurant"],
        "hour_of_day": [14],
        "day_of_week": [2],
        "user_age": [35],
        "location_risk_score": [0.2]
    })


@pytest.fixture
def batch_transaction_data():
    """–ü—Ä–∏–º–µ—Ä batch –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    return pd.DataFrame({
        "transaction_id": ["txn_001", "txn_002", "txn_003"],
        "amount": [50.0, 999.99, 25.0],
        "merchant_category": ["grocery", "electronics", "restaurant"],
        "hour_of_day": [10, 23, 12],
        "day_of_week": [1, 6, 3],
        "user_age": [25, 45, 30],
        "location_risk_score": [0.1, 0.8, 0.3]
    })


class TestFraudDetectionModel:
    """–¢–µ—Å—Ç—ã –∫–ª–∞—Å—Å–∞ FraudDetectionModel"""
    
    def test_model_initialization(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏"""
        model = FraudDetectionModel(
            mlflow_uri="http://test:5000",
            model_name="test_model",
            model_alias="test"
        )
        
        assert model.mlflow_uri == "http://test:5000"
        assert model.model_name == "test_model"
        assert model.model_alias == "test"
        assert not model.is_loaded
        assert model.model is None
    
    def test_preprocess_data(self, sample_transaction_data):
        """–¢–µ—Å—Ç –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        model = FraudDetectionModel(
            mlflow_uri="http://test:5000",
            model_name="test_model"
        )
        
        processed = model._preprocess_data(sample_transaction_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
        assert len(processed) == 1
        assert "amount" in processed.columns
        assert "merchant_category" in processed.columns
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —á–∏—Å–ª–∞
        assert processed["merchant_category"].dtype in [np.int64, np.float64]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        assert not processed.isnull().any().any()
    
    def test_preprocess_missing_values(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
        model = FraudDetectionModel(
            mlflow_uri="http://test:5000",
            model_name="test_model"
        )
        
        # –î–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        data_with_nans = pd.DataFrame({
            "transaction_id": ["txn_001"],
            "amount": [100.0],
            "merchant_category": ["restaurant"],
            "hour_of_day": [14],
            "day_of_week": [2],
            "user_age": [None],  # –ü—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            "location_risk_score": [None]  # –ü—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        })
        
        processed = model._preprocess_data(data_with_nans)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
        assert not processed.isnull().any().any()
        assert processed["user_age"].iloc[0] == 35  # –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        assert processed["location_risk_score"].iloc[0] == 0.5  # –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    
    def test_merchant_category_encoding(self):
        """–¢–µ—Å—Ç –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–æ–¥–∞–≤—Ü–æ–≤"""
        model = FraudDetectionModel(
            mlflow_uri="http://test:5000", 
            model_name="test_model"
        )
        
        test_data = pd.DataFrame({
            "transaction_id": ["txn_001", "txn_002"],
            "amount": [100.0, 200.0],
            "merchant_category": ["grocery", "unknown_category"],
            "hour_of_day": [10, 15],
            "day_of_week": [1, 2]
        })
        
        processed = model._preprocess_data(test_data)
        
        # grocery –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫ 0
        assert processed["merchant_category"].iloc[0] == 0
        # unknown_category –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫ 7 (other)
        assert processed["merchant_category"].iloc[1] == 7
    
    @pytest.mark.asyncio
    async def test_load_model_mock(self):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ —Å –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ–º MLflow"""
        with patch('mlflow.set_tracking_uri'), \
             patch('mlflow.tracking.MlflowClient') as mock_client_class, \
             patch('mlflow.pyfunc.load_model') as mock_load_model, \
             patch('asyncio.get_event_loop') as mock_loop:
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
            mock_client = Mock()
            mock_client_class.return_value = mock_client
            
            mock_model_version = Mock()
            mock_model_version.version = "1"
            mock_model_version.current_stage = "Production"
            mock_model_version.run_id = "test_run_id"
            mock_model_version.creation_timestamp = 1234567890
            mock_model_version.last_updated_timestamp = 1234567890
            mock_model_version.description = "Test model"
            mock_model_version.tags = []
            
            mock_client.get_model_version_by_alias.return_value = mock_model_version
            
            # –ú–æ–∫–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
            mock_loaded_model = Mock()
            mock_load_model.return_value = mock_loaded_model
            
            # –ú–æ–∫–∏—Ä—É–µ–º event loop
            mock_executor = Mock()
            mock_executor.return_value = mock_loaded_model
            mock_loop.return_value.run_in_executor = mock_executor
            
            # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
            model = FraudDetectionModel(
                mlflow_uri="http://test:5000",
                model_name="test_model",
                model_alias="test"
            )
            
            await model.load_model()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞
            assert model.is_loaded
            assert model.model_version == "1"
            assert model.model is not None
    
    @pytest.mark.asyncio 
    async def test_predict_mock(self, sample_transaction_data):
        """–¢–µ—Å—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å –º–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é"""
        model = FraudDetectionModel(
            mlflow_uri="http://test:5000",
            model_name="test_model"
        )
        
        # –ú–æ–∫–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
        mock_ml_model = Mock()
        mock_ml_model.predict.return_value = np.array([0])  # –ù–µ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ
        mock_ml_model.predict_proba.return_value = np.array([[0.7, 0.3]])  # 30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞
        
        model.model = mock_ml_model
        model.is_loaded = True
        model.model_version = "test_v1"
        
        with patch('asyncio.get_event_loop') as mock_loop:
            mock_executor = AsyncMock()
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏ –¥–ª—è predict –∏ predict_proba
            async def mock_predict(*args):
                return mock_ml_model.predict(args[1])
            
            async def mock_predict_proba(*args):
                return mock_ml_model.predict_proba(args[1])
            
            mock_loop.return_value.run_in_executor.side_effect = [
                mock_predict(None, None),  # predict
                mock_predict_proba(None, None)  # predict_proba
            ]
            
            result = await model.predict(sample_transaction_data)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            assert "is_fraud" in result
            assert "fraud_probability" in result
            assert result["fraud_probability"] == 0.3
            assert not result["is_fraud"]  # –ù–µ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ 0.3
            assert result["model_version"] == "test_v1"
    
    def test_get_model_info(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏"""
        model = FraudDetectionModel(
            mlflow_uri="http://test:5000",
            model_name="test_model",
            model_alias="champion"
        )
        
        model.model_version = "1"
        model.is_loaded = True
        model.load_time = 1500.0
        model.feature_names = ["amount", "category"]
        
        info = model.get_model_info()
        
        assert info["model_name"] == "test_model"
        assert info["model_version"] == "1"
        assert info["model_alias"] == "champion"
        assert info["is_loaded"] is True
        assert info["load_time_ms"] == 1500.0
        assert len(info["feature_names"]) == 2
    
    def test_estimate_model_size(self):
        """–¢–µ—Å—Ç –æ—Ü–µ–Ω–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ –º–æ–¥–µ–ª–∏"""
        model = FraudDetectionModel(
            mlflow_uri="http://test:5000",
            model_name="test_model"
        )
        
        # –ú–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—É—é –º–æ–¥–µ–ª—å
        model.model = {"test": "data"}
        
        size = model._estimate_model_size()
        assert isinstance(size, float)
        assert size >= 0.0


@pytest.mark.asyncio
async def test_predict_without_loaded_model():
    """–¢–µ—Å—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –±–µ–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    model = FraudDetectionModel(
        mlflow_uri="http://test:5000",
        model_name="test_model"
    )
    
    # –ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
    assert not model.is_loaded
    
    sample_data = pd.DataFrame({
        "transaction_id": ["txn_001"],
        "amount": [100.0],
        "merchant_category": ["restaurant"],
        "hour_of_day": [14],
        "day_of_week": [2]
    })
    
    # –û–∂–∏–¥–∞–µ–º RuntimeError
    with pytest.raises(RuntimeError, match="Model not loaded"):
        await model.predict(sample_data)
