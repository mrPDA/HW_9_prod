#!/usr/bin/env python3
"""
üöÄ –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML API —Å –ø–æ–º–æ—â—å—é Locust
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π
"""

import random
import json
import time
from locust import HttpUser, task, between
from datetime import datetime


class MLAPIUser(HttpUser):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ML API"""
    
    wait_time = between(1, 3)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ 1-3 —Å–µ–∫—É–Ω–¥—ã
    
    def on_start(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.test_data_pool = self._generate_test_data_pool(100)
        
    def _generate_test_data_pool(self, size: int) -> list:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—É–ª–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        merchant_categories = [
            "restaurant", "grocery", "gas_station", "pharmacy", "retail",
            "electronics", "clothing", "entertainment", "travel", "online"
        ]
        
        data_pool = []
        for i in range(size):
            data = {
                "transaction_id": f"load_test_{i}_{int(time.time())}",
                "amount": round(random.uniform(1.0, 2000.0), 2),
                "merchant_category": random.choice(merchant_categories),
                "hour_of_day": random.randint(0, 23),
                "day_of_week": random.randint(0, 6),
                "user_age": random.randint(18, 80),
                "location_risk_score": round(random.uniform(0.0, 1.0), 3)
            }
            data_pool.append(data)
        
        return data_pool
    
    @task(3)
    def test_single_prediction(self):
        """–¢–µ—Å—Ç –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (–≤–µ—Å 3)"""
        test_data = random.choice(self.test_data_pool)
        test_data["transaction_id"] = f"single_{int(time.time())}_{random.randint(1000, 9999)}"
        
        with self.client.post("/predict", json=test_data, catch_response=True) as response:
            if response.status_code == 200:
                try:
                    result = response.json()
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                    required_fields = ['transaction_id', 'is_fraud', 'fraud_probability']
                    if all(field in result for field in required_fields):
                        response.success()
                    else:
                        response.failure(f"Missing required fields: {required_fields}")
                except Exception as e:
                    response.failure(f"Invalid JSON response: {e}")
            elif response.status_code == 422:
                response.failure("Validation error")
            else:
                response.failure(f"HTTP {response.status_code}")
    
    @task(1)
    def test_batch_prediction(self):
        """–¢–µ—Å—Ç batch –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π (–≤–µ—Å 1)"""
        batch_size = random.randint(2, 5)
        transactions = random.sample(self.test_data_pool, batch_size)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º transaction_id –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        for i, transaction in enumerate(transactions):
            transaction["transaction_id"] = f"batch_{int(time.time())}_{i}"
        
        batch_data = {"transactions": transactions}
        
        with self.client.post("/predict/batch", json=batch_data, catch_response=True) as response:
            if response.status_code == 200:
                try:
                    result = response.json()
                    if 'predictions' in result and len(result['predictions']) == batch_size:
                        response.success()
                    else:
                        response.failure(f"Unexpected batch response structure")
                except Exception as e:
                    response.failure(f"Invalid JSON response: {e}")
            else:
                response.failure(f"HTTP {response.status_code}")
    
    @task(1)
    def test_health_check(self):
        """–¢–µ—Å—Ç health check (–≤–µ—Å 1)"""
        with self.client.get("/health", catch_response=True) as response:
            if response.status_code == 200:
                response.success()
            else:
                response.failure(f"Health check failed: HTTP {response.status_code}")
    
    @task(1)
    def test_api_root(self):
        """–¢–µ—Å—Ç –∫–æ—Ä–Ω–µ–≤–æ–≥–æ endpoint (–≤–µ—Å 1)"""
        with self.client.get("/", catch_response=True) as response:
            if response.status_code == 200:
                try:
                    result = response.json()
                    if 'service' in result:
                        response.success()
                    else:
                        response.failure("Missing service info in root response")
                except Exception as e:
                    response.failure(f"Invalid JSON response: {e}")
            else:
                response.failure(f"Root endpoint failed: HTTP {response.status_code}")


class StressTestUser(HttpUser):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π"""
    
    wait_time = between(0.1, 0.5)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞
    
    def on_start(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.stress_test_data = {
            "transaction_id": f"stress_{int(time.time())}",
            "amount": 100.0,
            "merchant_category": "test",
            "hour_of_day": 12,
            "day_of_week": 3
        }
    
    @task
    def stress_predict(self):
        """–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""
        self.stress_test_data["transaction_id"] = f"stress_{int(time.time())}_{random.randint(1000, 9999)}"
        
        with self.client.post("/predict", json=self.stress_test_data, catch_response=True) as response:
            if response.status_code == 200:
                response.success()
            else:
                response.failure(f"Stress test failed: HTTP {response.status_code}")


def run_load_test_scenario(api_url: str, users: int = 10, spawn_rate: int = 2, 
                          duration: int = 60, output_file: str = None):
    """
    –ó–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    Args:
        api_url: URL API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        users: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        spawn_rate: –°–∫–æ—Ä–æ—Å—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π/—Å–µ–∫)
        duration: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        output_file: –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    """
    import subprocess
    import os
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Locust
    cmd = [
        "locust",
        "-f", __file__,
        "-H", api_url,
        "-u", str(users),
        "-r", str(spawn_rate),
        "-t", f"{duration}s",
        "--headless",
        "--only-summary"
    ]
    
    if output_file:
        cmd.extend(["--html", output_file])
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   üéØ URL: {api_url}")
    print(f"   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users}")
    print(f"   üìà –°–∫–æ—Ä–æ—Å—Ç—å: {spawn_rate} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π/—Å–µ–∫")
    print(f"   ‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Å–µ–∫")
    
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=duration + 30)
        
        print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(result.stdout)
        
        if result.stderr:
            print("\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:")
            print(result.stderr)
        
        return result.returncode == 0
        
    except subprocess.TimeoutExpired:
        print("‚ùå –¢–µ—Å—Ç –ø—Ä–µ–≤—ã—Å–∏–ª –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞: {e}")
        return False


if __name__ == "__main__":
    import sys
    import argparse
    
    parser = argparse.ArgumentParser(description="üöÄ –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML API")
    parser.add_argument("--url", default="http://localhost:8000", 
                       help="URL API (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: http://localhost:8000)")
    parser.add_argument("--users", type=int, default=10,
                       help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10)")
    parser.add_argument("--spawn-rate", type=int, default=2,
                       help="–°–∫–æ—Ä–æ—Å—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π/—Å–µ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 2)")
    parser.add_argument("--duration", type=int, default=60,
                       help="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 60)")
    parser.add_argument("--output", 
                       help="–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è HTML –æ—Ç—á–µ—Ç–∞")
    parser.add_argument("--mode", choices=["normal", "stress"], default="normal",
                       help="–†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (normal/stress)")
    
    args = parser.parse_args()
    
    if args.mode == "stress":
        print("‚ö° –†–µ–∂–∏–º —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        # –î–ª—è —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É
        args.users = args.users * 2
        args.spawn_rate = args.spawn_rate * 3
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç—á–µ—Ç–∞ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
    if not args.output:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        args.output = f"load_test_report_{timestamp}.html"
    
    success = run_load_test_scenario(
        api_url=args.url,
        users=args.users,
        spawn_rate=args.spawn_rate,
        duration=args.duration,
        output_file=args.output
    )
    
    if success:
        print(f"‚úÖ –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        if args.output:
            print(f"üìä –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {args.output}")
        sys.exit(0)
    else:
        print("‚ùå –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")
        sys.exit(1)
