#!/usr/bin/env python3
"""
üß™ –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤ API
–í–∫–ª—é—á–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–æ–≤
"""

import os
import sys
import json
import time
import argparse
import subprocess
from pathlib import Path
from datetime import datetime
from typing import Dict, Any, List

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(str(Path(__file__).parent))

from test_public_api import APITester
from report_generator import generate_html_report


class APITestSuite:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ –¥–ª—è ML API"""
    
    def __init__(self, api_url: str, output_dir: str = "test_results"):
        self.api_url = api_url
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(exist_ok=True)
        self.timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
    def run_functional_tests(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ API"""
        print("üß™ –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...")
        
        tester = APITester(self.api_url)
        results = tester.run_full_test_suite()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results_file = self.output_dir / f"functional_tests_{self.timestamp}.json"
        with open(results_file, 'w', encoding='utf-8') as f:
            json.dump(results, f, indent=2, ensure_ascii=False)
        
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {results_file}")
        return results
    
    def run_performance_tests(self, users: int = 10, duration: int = 30) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print(f"üìà –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ({users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {duration}—Å)...")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Locust
        load_test_script = Path(__file__).parent / "load_test.py"
        
        if not load_test_script.exists():
            print("‚ùå –°–∫—Ä–∏–ø—Ç –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return {"error": "Load test script not found"}
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        output_file = self.output_dir / f"load_test_{self.timestamp}.html"
        
        cmd = [
            sys.executable, str(load_test_script),
            "--url", self.api_url,
            "--users", str(users),
            "--spawn-rate", str(max(1, users // 5)),
            "--duration", str(duration),
            "--output", str(output_file)
        ]
        
        try:
            result = subprocess.run(cmd, capture_output=True, text=True, 
                                  timeout=duration + 60)
            
            # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            perf_results = {
                "load_test_completed": result.returncode == 0,
                "users": users,
                "duration": duration,
                "output_file": str(output_file),
                "stdout": result.stdout,
                "stderr": result.stderr
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            perf_file = self.output_dir / f"performance_results_{self.timestamp}.json"
            with open(perf_file, 'w', encoding='utf-8') as f:
                json.dump(perf_results, f, indent=2, ensure_ascii=False)
            
            print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {perf_file}")
            return perf_results
            
        except subprocess.TimeoutExpired:
            print("‚ùå –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
            return {"error": "Performance test timeout"}
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            return {"error": str(e)}
    
    def run_security_tests(self) -> Dict[str, Any]:
        """–ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ API"""
        print("üîí –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
        
        security_results = {
            "test_name": "Security Tests",
            "timestamp": datetime.now().isoformat(),
            "tests": []
        }
        
        import requests
        
        # –¢–µ—Å—Ç –Ω–∞ SQL injection
        sql_injection_payloads = [
            "'; DROP TABLE users; --",
            "' OR '1'='1",
            "admin'; --"
        ]
        
        for payload in sql_injection_payloads:
            test_data = {
                "transaction_id": payload,
                "amount": 100.0,
                "merchant_category": "test",
                "hour_of_day": 12,
                "day_of_week": 3
            }
            
            try:
                response = requests.post(f"{self.api_url}/predict", 
                                       json=test_data, timeout=10)
                
                # API –¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—è—Ç—å —Ç–∞–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã
                security_results["tests"].append({
                    "test": "SQL Injection Protection",
                    "payload": payload,
                    "status_code": response.status_code,
                    "safe": response.status_code in [400, 422],  # –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                })
                
            except Exception as e:
                security_results["tests"].append({
                    "test": "SQL Injection Protection",
                    "payload": payload,
                    "error": str(e),
                    "safe": True  # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –≤—ã–∑–≤–∞–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ
                })
        
        # –¢–µ—Å—Ç –Ω–∞ XSS
        xss_payloads = [
            "<script>alert('xss')</script>",
            "javascript:alert('xss')",
            "<img src=x onerror=alert('xss')>"
        ]
        
        for payload in xss_payloads:
            test_data = {
                "transaction_id": "test_xss",
                "amount": 100.0,
                "merchant_category": payload,
                "hour_of_day": 12,
                "day_of_week": 3
            }
            
            try:
                response = requests.post(f"{self.api_url}/predict", 
                                       json=test_data, timeout=10)
                
                security_results["tests"].append({
                    "test": "XSS Protection",
                    "payload": payload,
                    "status_code": response.status_code,
                    "safe": response.status_code in [400, 422]
                })
                
            except Exception as e:
                security_results["tests"].append({
                    "test": "XSS Protection", 
                    "payload": payload,
                    "error": str(e),
                    "safe": True
                })
        
        # –¢–µ—Å—Ç –Ω–∞ –±–æ–ª—å—à–∏–µ –¥–∞–Ω–Ω—ã–µ (DoS protection)
        large_data = {
            "transaction_id": "large_test",
            "amount": 100.0,
            "merchant_category": "x" * 10000,  # –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
            "hour_of_day": 12,
            "day_of_week": 3
        }
        
        try:
            response = requests.post(f"{self.api_url}/predict", 
                                   json=large_data, timeout=10)
            
            security_results["tests"].append({
                "test": "Large Input Protection",
                "status_code": response.status_code,
                "safe": response.status_code in [400, 413, 422]  # –û–∂–∏–¥–∞–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            })
            
        except Exception as e:
            security_results["tests"].append({
                "test": "Large Input Protection",
                "error": str(e),
                "safe": True
            })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        security_file = self.output_dir / f"security_tests_{self.timestamp}.json"
        with open(security_file, 'w', encoding='utf-8') as f:
            json.dump(security_results, f, indent=2, ensure_ascii=False)
        
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {security_file}")
        return security_results
    
    def generate_comprehensive_report(self, functional_results: Dict[str, Any],
                                    performance_results: Dict[str, Any] = None,
                                    security_results: Dict[str, Any] = None) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        comprehensive_results = functional_results.copy()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if performance_results and not performance_results.get('error'):
            comprehensive_results['performance_tests'] = performance_results
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if security_results:
            comprehensive_results['security_tests'] = security_results
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã
            safe_tests = sum(1 for test in security_results['tests'] if test.get('safe', False))
            total_security_tests = len(security_results['tests'])
            
            comprehensive_results['security_score'] = (safe_tests / total_security_tests * 100) if total_security_tests > 0 else 0
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –æ—Ç—á–µ—Ç
        report_file = self.output_dir / f"comprehensive_report_{self.timestamp}.html"
        html_file = generate_html_report(comprehensive_results, str(report_file))
        
        print(f"üìÑ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç: {html_file}")
        return html_file
    
    def run_full_test_suite(self, include_performance: bool = True, 
                          include_security: bool = True,
                          performance_users: int = 10,
                          performance_duration: int = 30) -> Dict[str, str]:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤ API...")
        print(f"üéØ –¶–µ–ª—å: {self.api_url}")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤: {self.output_dir}")
        print("-" * 60)
        
        start_time = time.time()
        results = {}
        
        # 1. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ)
        functional_results = self.run_functional_tests()
        results['functional'] = functional_results
        
        # 2. –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        performance_results = None
        if include_performance:
            performance_results = self.run_performance_tests(
                users=performance_users, 
                duration=performance_duration
            )
            results['performance'] = performance_results
        
        # 3. –¢–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        security_results = None
        if include_security:
            security_results = self.run_security_tests()
            results['security'] = security_results
        
        # 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        report_file = self.generate_comprehensive_report(
            functional_results, performance_results, security_results
        )
        results['report'] = report_file
        
        duration = time.time() - start_time
        
        print("-" * 60)
        print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {duration:.1f} —Å–µ–∫")
        print(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {functional_results.get('success_rate', 0):.1f}%")
        
        if security_results:
            safe_tests = sum(1 for test in security_results['tests'] if test.get('safe', False))
            total_security = len(security_results['tests'])
            print(f"üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {safe_tests}/{total_security} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
        
        print(f"üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç: {report_file}")
        
        return results


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(description="üß™ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML API")
    
    parser.add_argument("--url", default="http://localhost:8000",
                       help="URL API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    parser.add_argument("--output-dir", default="test_results",
                       help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    parser.add_argument("--no-performance", action="store_true",
                       help="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    parser.add_argument("--no-security", action="store_true",
                       help="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    parser.add_argument("--performance-users", type=int, default=10,
                       help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    parser.add_argument("--performance-duration", type=int, default=30,
                       help="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (—Å–µ–∫)")
    parser.add_argument("--quick", action="store_true",
                       help="–ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã)")
    
    args = parser.parse_args()
    
    # –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if args.quick:
        args.no_performance = True
        args.no_security = True
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç-—Å—å—é—Ç
    test_suite = APITestSuite(args.url, args.output_dir)
    
    try:
        results = test_suite.run_full_test_suite(
            include_performance=not args.no_performance,
            include_security=not args.no_security,
            performance_users=args.performance_users,
            performance_duration=args.performance_duration
        )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        functional_success = results['functional'].get('success_rate', 0) >= 70
        
        if functional_success:
            print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            sys.exit(0)
        else:
            print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ!")
            sys.exit(1)
            
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(2)


if __name__ == "__main__":
    main()
